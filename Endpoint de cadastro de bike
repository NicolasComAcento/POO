import express, { Request as ExpressRequest, Response as ExpressResponse, NextFunction as ExpressNextFunction } from 'express';
import bodyParser from 'body-parser';
import { App } from './app';
import { PrismaUserRepo as UserRepo } from './external/database/prisma-user-repo';
import { PrismaBikeRepo as BikeRepo } from './external/database/prisma-bike-repo';
import { PrismaRentRepo as RentRepo } from './external/database/prisma-rent-repo';
import { DuplicateUserError } from './errors/duplicate-user-error';

const cors = (req: ExpressRequest, res: ExpressResponse, next: ExpressNextFunction): void => {
    res.set('access-control-allow-origin', '*');
    res.set('access-control-allow-headers', '*');
    res.set('access-control-allow-methods', '*');
    next();
};

const contentType = (req: ExpressRequest, res: ExpressResponse, next: ExpressNextFunction): void => {
    res.type('json');
    next();
};

const server = express();
server.use(bodyParser.json());
server.use(cors);
server.use(contentType);

const app = new App(
    new UserRepo(),
    new BikeRepo(),
    new RentRepo()
);

server.post('/api/users', async (req, res) => {
    try {
        const userId = await app.registerUser(req.body);
        res.status(201).json({ id: userId });
    } catch (e) {
        if (e instanceof DuplicateUserError) {
            res.status(400).json({
                message: 'Could not register user.'
            });
            return;
        }
        res.status(500).json({
            message: 'Internal server error.'
        });
    }
});

server.post('/api/bikes', async (req, res) => {
    try {
        const bikeId = await app.registerBike(req.body);
        res.status(201).json({ id: bikeId });
    } catch (e) {
        console.error(e.message);
        res.status(500).json({ message: 'Internal server error.' });
    }
});

const port = 3000;
server.listen(port, () => {
    console.log(`Server listening on port ${port}`);
});

export default server;
